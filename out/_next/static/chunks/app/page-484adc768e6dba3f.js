(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{713:(n,e,t)=>{"use strict";t.d(e,{default:()=>u});var o=t(5155),i=t(2115),a=t(8724),l=t(8781),c=t(8453),r=t(4851),v=t(1972);function s(n){let{initialHue:e=0,hueRotationSpeed:t=1,hoverIntensity:s=.2,rotateOnHover:u=!0,forceHoverState:d=!1}=n,h=(0,i.useRef)(null);return(0,i.useEffect)(()=>{let n,o=h.current;if(!o)return;let i=new a.A({alpha:!0,premultipliedAlpha:!1}),f=i.gl;f.clearColor(0,0,0,0),o.appendChild(f.canvas);let m=new l.l(f),y=new c.B(f,{vertex:"\n    precision highp float;\n    attribute vec2 position;\n    attribute vec2 uv;\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = vec4(position, 0.0, 1.0);\n    }\n  ",fragment:'\n    precision highp float;\n\n    uniform float iTime;\n    uniform vec3 iResolution;\n    uniform float hue;\n    uniform float hover;\n    uniform float rot;\n    uniform float hoverIntensity;\n    varying vec2 vUv;\n\n    vec3 rgb2yiq(vec3 c) {\n      float y = dot(c, vec3(0.299, 0.587, 0.114));\n      float i = dot(c, vec3(0.596, -0.274, -0.322));\n      float q = dot(c, vec3(0.211, -0.523, 0.312));\n      return vec3(y, i, q);\n    }\n    \n    vec3 yiq2rgb(vec3 c) {\n      float r = c.x + 0.956 * c.y + 0.621 * c.z;\n      float g = c.x - 0.272 * c.y - 0.647 * c.z;\n      float b = c.x - 1.106 * c.y + 1.703 * c.z;\n      return vec3(r, g, b);\n    }\n    \n    vec3 adjustHue(vec3 color, float hueDeg) {\n      float hueRad = hueDeg * 3.14159265 / 180.0;\n      vec3 yiq = rgb2yiq(color);\n      float cosA = cos(hueRad);\n      float sinA = sin(hueRad);\n      float i = yiq.y * cosA - yiq.z * sinA;\n      float q = yiq.y * sinA + yiq.z * cosA;\n      yiq.y = i;\n      yiq.z = q;\n      return yiq2rgb(yiq);\n    }\n\n    vec3 hash33(vec3 p3) {\n      p3 = fract(p3 * vec3(0.1031, 0.11369, 0.13787));\n      p3 += dot(p3, p3.yxz + 19.19);\n      return -1.0 + 2.0 * fract(vec3(\n        p3.x + p3.y,\n        p3.x + p3.z,\n        p3.y + p3.z\n      ) * p3.zyx);\n    }\n\n    float snoise3(vec3 p) {\n      const float K1 = 0.333333333;\n      const float K2 = 0.166666667;\n      vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n      vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n      vec3 e = step(vec3(0.0), d0 - d0.yzx);\n      vec3 i1 = e * (1.0 - e.zxy);\n      vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n      vec3 d1 = d0 - (i1 - K2);\n      vec3 d2 = d0 - (i2 - K1);\n      vec3 d3 = d0 - 0.5;\n      vec4 h = max(0.6 - vec4(\n        dot(d0, d0),\n        dot(d1, d1),\n        dot(d2, d2),\n        dot(d3, d3)\n      ), 0.0);\n      vec4 n = h * h * h * h * vec4(\n        dot(d0, hash33(i)),\n        dot(d1, hash33(i + i1)),\n        dot(d2, hash33(i + i2)),\n        dot(d3, hash33(i + 1.0))\n      );\n      return dot(vec4(31.316), n);\n    }\n\n    // Instead of "extractAlpha" that normalizes the color,\n    // we keep the computed color as-is and later multiply by alpha.\n    vec4 extractAlpha(vec3 colorIn) {\n      float a = max(max(colorIn.r, colorIn.g), colorIn.b);\n      return vec4(colorIn.rgb / (a + 1e-5), a);\n    }\n\n    const vec3 baseColor1 = vec3(0.611765, 0.262745, 0.996078);\n    const vec3 baseColor2 = vec3(0.298039, 0.760784, 0.913725);\n    const vec3 baseColor3 = vec3(0.062745, 0.078431, 0.600000);\n    const float innerRadius = 0.6;\n    const float noiseScale = 0.65;\n\n    float light1(float intensity, float attenuation, float dist) {\n      return intensity / (1.0 + dist * attenuation);\n    }\n    float light2(float intensity, float attenuation, float dist) {\n      return intensity / (1.0 + dist * dist * attenuation);\n    }\n\n    vec4 draw(vec2 uv) {\n      vec3 color1 = adjustHue(baseColor1, hue);\n      vec3 color2 = adjustHue(baseColor2, hue);\n      vec3 color3 = adjustHue(baseColor3, hue);\n      \n      float ang = atan(uv.y, uv.x);\n      float len = length(uv);\n      float invLen = len > 0.0 ? 1.0 / len : 0.0;\n      \n      float n0 = snoise3(vec3(uv * noiseScale, iTime * 0.5)) * 0.5 + 0.5;\n      float r0 = mix(mix(innerRadius, 1.0, 0.4), mix(innerRadius, 1.0, 0.6), n0);\n      float d0 = distance(uv, (r0 * invLen) * uv);\n      float v0 = light1(1.0, 10.0, d0);\n      v0 *= smoothstep(r0 * 1.05, r0, len);\n      float cl = cos(ang + iTime * 2.0) * 0.5 + 0.5;\n      \n      float a = iTime * -1.0;\n      vec2 pos = vec2(cos(a), sin(a)) * r0;\n      float d = distance(uv, pos);\n      float v1 = light2(1.5, 5.0, d);\n      v1 *= light1(1.0, 50.0, d0);\n      \n      float v2 = smoothstep(1.0, mix(innerRadius, 1.0, n0 * 0.5), len);\n      float v3 = smoothstep(innerRadius, mix(innerRadius, 1.0, 0.5), len);\n      \n      vec3 col = mix(color1, color2, cl);\n      col = mix(color3, col, v0);\n      col = (col + v1) * v2 * v3;\n      col = clamp(col, 0.0, 1.0);\n      \n      return extractAlpha(col);\n    }\n\n    vec4 mainImage(vec2 fragCoord) {\n      vec2 center = iResolution.xy * 0.5;\n      float size = min(iResolution.x, iResolution.y);\n      vec2 uv = (fragCoord - center) / size * 2.0;\n      \n      float angle = rot;\n      float s = sin(angle);\n      float c = cos(angle);\n      uv = vec2(c * uv.x - s * uv.y, s * uv.x + c * uv.y);\n      \n      uv.x += hover * hoverIntensity * 0.1 * sin(uv.y * 10.0 + iTime);\n      uv.y += hover * hoverIntensity * 0.1 * sin(uv.x * 10.0 + iTime);\n      \n      return draw(uv);\n    }\n\n    void main() {\n      vec2 fragCoord = vUv * iResolution.xy;\n      vec4 col = mainImage(fragCoord);\n      gl_FragColor = vec4(col.rgb * col.a, col.a);\n    }\n  ',uniforms:{iTime:{value:0},iResolution:{value:new r.e(f.canvas.width,f.canvas.height,f.canvas.width/f.canvas.height)},hue:{value:e},hover:{value:0},rot:{value:0},hoverIntensity:{value:s}}}),p=new v.e(f,{geometry:m,program:y});function g(){if(!o)return;let n=window.devicePixelRatio||1,e=o.clientWidth,t=o.clientHeight;i.setSize(e*n,t*n),f.canvas.style.width=e+"px",f.canvas.style.height=t+"px",y.uniforms.iResolution.value.set(f.canvas.width,f.canvas.height,f.canvas.width/f.canvas.height)}window.addEventListener("resize",g),g();let x=0,b=0,w=0,z=e,R=n=>{let e=o.getBoundingClientRect(),t=n.clientX-e.left,i=n.clientY-e.top,a=e.width,l=e.height,c=Math.min(a,l),r=(t-a/2)/c*2,v=(i-l/2)/c*2;x=+(.8>Math.sqrt(r*r+v*v))},q=()=>{x=0};o.addEventListener("mousemove",R),o.addEventListener("mouseleave",q);let C=e=>{n=requestAnimationFrame(C);let o=(e-b)*.001;b=e,y.uniforms.iTime.value=.001*e,z=(z+15*o*t)%360,y.uniforms.hue.value=z,y.uniforms.hoverIntensity.value=s;let a=d?1:x;y.uniforms.hover.value+=(a-y.uniforms.hover.value)*.1,u&&a>.5&&(w+=.3*o),y.uniforms.rot.value=w,i.render({scene:p})};return n=requestAnimationFrame(C),()=>{var e;cancelAnimationFrame(n),window.removeEventListener("resize",g),o.removeEventListener("mousemove",R),o.removeEventListener("mouseleave",q),o.removeChild(f.canvas),null==(e=f.getExtension("WEBGL_lose_context"))||e.loseContext()}},[e,t,s,u,d]),(0,o.jsx)("div",{ref:h,className:"orb-container"})}function u(n){let{children:e,hueRotationSpeed:t=1}=n;return(0,o.jsxs)("div",{className:"relative h-screen w-full bg-black overflow-hidden",children:[(0,o.jsx)("div",{className:"absolute inset-0 z-0",children:(0,o.jsx)(s,{initialHue:0,hueRotationSpeed:t,hoverIntensity:.2,rotateOnHover:!0,forceHoverState:!1})}),(0,o.jsx)("div",{className:"relative z-10 h-full",children:e})]})}t(4447)},4447:()=>{},8656:(n,e,t)=>{Promise.resolve().then(t.t.bind(t,6874,23)),Promise.resolve().then(t.bind(t,713))}},n=>{var e=e=>n(n.s=e);n.O(0,[454,874,679,441,684,358],()=>e(8656)),_N_E=n.O()}]);